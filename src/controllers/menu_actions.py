#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Menu Actions - Controlador para acciones de men√∫ y utilidades
Maneja todas las acciones de men√∫s, estad√≠sticas, exportaci√≥n e informaci√≥n del sistema
"""

from typing import Optional, Dict, Any
from PySide6.QtCore import QObject, Signal
from PySide6.QtWidgets import QFileDialog, QWidget

from utils.protocol_manager import ProtocolManager
from utils.dialog_utils import (show_info, show_success, show_warning, show_error, 
                               ask_confirmation, DialogUtils)


class MenuActions(QObject):
    """
    Controlador especializado para acciones de men√∫ y utilidades del sistema.
    Centraliza funciones de informaci√≥n, exportaci√≥n, importaci√≥n y estad√≠sticas.
    """
    
    # Se√±ales
    status_message_changed = Signal(str)  # Mensajes para status bar
    protocols_refreshed = Signal()  # Protocolos recargados
    
    def __init__(self, protocol_manager: ProtocolManager, parent=None):
        super().__init__(parent)
        
        # Referencias
        self.protocol_manager = protocol_manager
        self.main_window = parent  # Referencia a ventana principal
        
        # Estado del sistema (se actualizar√° externamente)
        self.system_status = {
            'siev_connected': False,
            'protocols_loaded': 0,
            'camera_active': False,
            'execution_active': False
        }
        
        print("‚úÖ MenuActions inicializado")
    
    def update_system_status(self, **kwargs):
        """Actualizar estado del sistema"""
        self.system_status.update(kwargs)
    
    # ===== INFORMACI√ìN DEL SISTEMA =====
    
    def show_system_info(self):
        """Mostrar informaci√≥n completa del sistema"""
        info_text = f"""
<b>SIEV - Sistema Integrado de Evaluaci√≥n Vestibular</b><br><br>

<b>Estado del Sistema:</b><br>
‚Ä¢ Hardware SIEV: {'Conectado' if self.system_status['siev_connected'] else 'No conectado'}<br>
‚Ä¢ Protocolos cargados: {self.system_status['protocols_loaded']}<br>
‚Ä¢ C√°mara: {'Activa' if self.system_status['camera_active'] else 'Inactiva'}<br>
‚Ä¢ Ejecuci√≥n: {'En curso' if self.system_status['execution_active'] else 'Inactiva'}<br><br>

<b>M√≥dulos del Sistema:</b><br>
‚Ä¢ ProtocolTreeWidget: Gesti√≥n de protocolos<br>
‚Ä¢ ProtocolExecutor: Ejecuci√≥n con eventos temporales<br>
‚Ä¢ ProtocolManager: Validaci√≥n y persistencia<br>
‚Ä¢ ModularCameraWidget: Captura y detecci√≥n<br>
‚Ä¢ VCLGraphWidget: An√°lisis de se√±ales<br><br>

<b>Caracter√≠sticas:</b><br>
‚Ä¢ ‚úÖ Protocolos vestibulares est√°ndar m√©dicos<br>
‚Ä¢ ‚úÖ Control de hardware ESP8266 + LEDs<br>
‚Ä¢ ‚úÖ Eventos temporales autom√°ticos<br>
‚Ä¢ ‚úÖ Editor avanzado de protocolos<br>
‚Ä¢ ‚úÖ Detecci√≥n autom√°tica de ojos y pupilas<br>
‚Ä¢ ‚úÖ An√°lisis de gr√°ficos con herramientas especializadas<br><br>

<b>Arquitectura Modular:</b><br>
‚Ä¢ /core/ - L√≥gica central (MainWindowBase, SievManager, ProtocolCoordinator)<br>
‚Ä¢ /controllers/ - Controladores especializados (Camera, Graph, MenuActions)<br>
‚Ä¢ /widgets/ - Widgets reutilizables<br>
‚Ä¢ /utils/ - Utilidades y helpers<br>
‚Ä¢ /camera/ - M√≥dulos de c√°mara y detecci√≥n<br>
"""
        
        DialogUtils.show_info("Informaci√≥n del Sistema", info_text, self.main_window)
        self.status_message_changed.emit("‚ÑπÔ∏è Informaci√≥n del sistema mostrada")
    
    def show_about_dialog(self):
        """Mostrar di√°logo Acerca de"""
        about_text = """
<b>SIEV v2.0 - Sistema Integrado de Evaluaci√≥n Vestibular</b><br><br>

<b>Caracter√≠sticas Principales:</b><br>
‚Ä¢ Protocolos vestibulares est√°ndar m√©dicos<br>
‚Ä¢ Control de hardware ESP8266 + LEDs<br>
‚Ä¢ Eventos temporales autom√°ticos<br>
‚Ä¢ Editor avanzado de protocolos<br>
‚Ä¢ Detecci√≥n de ojos y pupilas<br>
‚Ä¢ An√°lisis de gr√°ficos especializado<br><br>

<b>Tecnolog√≠as:</b><br>
‚Ä¢ PySide6 para interfaz gr√°fica<br>
‚Ä¢ OpenCV para procesamiento de imagen<br>
‚Ä¢ PyQtGraph para visualizaci√≥n de datos<br>
‚Ä¢ Serial para comunicaci√≥n hardware<br>
‚Ä¢ JSON para configuraci√≥n de protocolos<br><br>

<b>Desarrollado con arquitectura modular</b><br>
¬© 2025 Proyecto SIEV
"""
        
        DialogUtils.show_info("Acerca de SIEV v2.0", about_text, self.main_window)
    
    # ===== EXPORTACI√ìN E IMPORTACI√ìN =====
    
    def export_protocols(self):
        """Exportar protocolos a archivo"""
        if not self.protocol_manager:
            show_error("Error", "Sistema de protocolos no disponible", self.main_window)
            return
        
        # Di√°logo de selecci√≥n de archivo
        export_path, _ = QFileDialog.getSaveFileName(
            self.main_window,
            "Exportar Protocolos",
            "protocolos_siev_export.json",
            "JSON Files (*.json)"
        )
        
        if not export_path:
            return  # Usuario cancel√≥
        
        # Realizar exportaci√≥n
        success = self.protocol_manager.export_protocols(
            export_path, 
            include_defaults=True, 
            include_presets=True
        )
        
        if success:
            message = f"Protocolos exportados correctamente"
            self.status_message_changed.emit(f"üì§ {message}")
            show_success("Exportaci√≥n Exitosa", 
                       f"Protocolos exportados a:\n{export_path}",
                       self.main_window)
        else:
            show_error("Error de Exportaci√≥n", 
                      "No se pudieron exportar los protocolos",
                      self.main_window)
    
    def import_protocols(self):
        """Importar protocolos desde archivo"""
        if not self.protocol_manager:
            show_error("Error", "Sistema de protocolos no disponible", self.main_window)
            return
        
        # Di√°logo de selecci√≥n de archivo
        import_path, _ = QFileDialog.getOpenFileName(
            self.main_window,
            "Importar Protocolos",
            "",
            "JSON Files (*.json)"
        )
        
        if not import_path:
            return  # Usuario cancel√≥
        
        # Preguntar si sobrescribir existentes
        overwrite = ask_confirmation(
            "Importar Protocolos",
            "¬øDesea sobrescribir protocolos existentes con el mismo nombre?",
            self.main_window
        )
        
        # Realizar importaci√≥n
        success, count = self.protocol_manager.import_protocols(import_path, overwrite)
        
        if success:
            self.protocol_manager.save_protocols()
            message = f"{count} protocolos importados correctamente"
            self.status_message_changed.emit(f"üì• {message}")
            self.protocols_refreshed.emit()  # Se√±al para recargar UI
            
            show_success("Importaci√≥n Exitosa", message, self.main_window)
        else:
            show_error("Error de Importaci√≥n", 
                      "No se pudieron importar los protocolos",
                      self.main_window)
    
    # ===== ESTAD√çSTICAS Y AN√ÅLISIS =====
    
    def show_protocol_statistics(self):
        """Mostrar estad√≠sticas detalladas de protocolos"""
        if not self.protocol_manager:
            show_error("Error", "Sistema de protocolos no disponible", self.main_window)
            return
        
        stats = self.protocol_manager.get_statistics()
        
        # Formatear categor√≠as
        categories_text = "<br>".join([
            f"‚Ä¢ {cat}: {count}" for cat, count in stats["categories"].items()
        ]) if stats["categories"] else "‚Ä¢ Sin categor√≠as"
        
        # Formatear tipos de comportamiento
        behavior_types_text = "<br>".join([
            f"‚Ä¢ {bt}: {count}" for bt, count in stats["behavior_types"].items()
        ]) if stats["behavior_types"] else "‚Ä¢ Sin tipos"
        
        stats_text = f"""
<b>Estad√≠sticas de Protocolos SIEV</b><br><br>

<b>Resumen General:</b><br>
‚Ä¢ Total de protocolos: {stats['total_protocols']}<br>
‚Ä¢ Protocolos est√°ndar: {stats['default_protocols']}<br>
‚Ä¢ Protocolos personalizados: {stats['preset_protocols']}<br><br>

<b>Distribuci√≥n por Categor√≠a:</b><br>
{categories_text}<br><br>

<b>Distribuci√≥n por Tipo de Comportamiento:</b><br>
{behavior_types_text}<br><br>

<b>Informaci√≥n del Archivo:</b><br>
‚Ä¢ Ruta: {stats['file_path']}<br>
‚Ä¢ Estado: {'Cargado correctamente' if stats['is_loaded'] else 'Error de carga'}<br><br>

<b>Recomendaciones:</b><br>
‚Ä¢ Use protocolos est√°ndar como base para evaluaciones<br>
‚Ä¢ Cree copias personalizadas para casos espec√≠ficos<br>
‚Ä¢ Valide protocolos regularmente para mantener integridad<br>
"""
        
        DialogUtils.show_info("Estad√≠sticas de Protocolos", stats_text, self.main_window)
        self.status_message_changed.emit("üìä Estad√≠sticas de protocolos mostradas")
    
    def validate_all_protocols(self):
        """Validar todos los protocolos del sistema"""
        if not self.protocol_manager:
            show_error("Error", "Sistema de protocolos no disponible", self.main_window)
            return
        
        all_protocols = self.protocol_manager.get_all_protocols()
        
        valid_count = 0
        invalid_protocols = []
        
        # Validar cada protocolo
        for key, protocol in all_protocols.items():
            is_valid, errors = self.protocol_manager.validate_protocol(protocol)
            if is_valid:
                valid_count += 1
            else:
                invalid_protocols.append((key, errors))
        
        # Mostrar resultados
        if invalid_protocols:
            error_text = f"<b>Validaci√≥n Completada con Errores</b><br><br>"
            error_text += f"‚úÖ Protocolos v√°lidos: {valid_count}<br>"
            error_text += f"‚ùå Protocolos inv√°lidos: {len(invalid_protocols)}<br><br>"
            
            error_text += "<b>Protocolos con Errores:</b><br>"
            
            # Mostrar solo los primeros 5 para evitar ventanas muy largas
            for i, (key, errors) in enumerate(invalid_protocols[:5]):
                protocol_name = all_protocols[key].get('name', key)
                error_text += f"<br><b>‚Ä¢ {protocol_name}:</b><br>"
                
                # Mostrar solo los primeros 3 errores
                for error in errors[:3]:
                    error_text += f"  - {error}<br>"
                
                if len(errors) > 3:
                    error_text += f"  ... y {len(errors) - 3} errores m√°s<br>"
            
            if len(invalid_protocols) > 5:
                error_text += f"<br>... y {len(invalid_protocols) - 5} protocolos m√°s con errores"
            
            show_warning("Protocolos Inv√°lidos Encontrados", error_text, self.main_window)
        else:
            success_text = f"""
<b>‚úÖ Validaci√≥n Exitosa</b><br><br>

Todos los {valid_count} protocolos son v√°lidos y cumplen con:<br><br>

‚Ä¢ Campos requeridos presentes<br>
‚Ä¢ Tipos de datos correctos<br>
‚Ä¢ Rangos de valores v√°lidos<br>
‚Ä¢ Estructura JSON correcta<br>
‚Ä¢ Configuraciones de hardware v√°lidas<br><br>

<b>Estado del Sistema:</b> √ìptimo para uso cl√≠nico
"""
            show_success("Validaci√≥n Completada", success_text, self.main_window)
        
        message = f"Validaci√≥n completada: {valid_count} v√°lidos, {len(invalid_protocols)} con errores"
        self.status_message_changed.emit(f"‚úÖ {message}")
    
    def show_hardware_diagnostics(self):
        """Mostrar diagn√≥sticos de hardware"""
        diagnostic_text = f"""
<b>Diagn√≥sticos de Hardware SIEV</b><br><br>

<b>Estado Actual:</b><br>
‚Ä¢ SIEV Conectado: {'‚úÖ S√≠' if self.system_status['siev_connected'] else '‚ùå No'}<br>
‚Ä¢ C√°mara Activa: {'‚úÖ S√≠' if self.system_status['camera_active'] else '‚ùå No'}<br><br>

<b>Componentes Esperados:</b><br>
‚Ä¢ Hub USB (VID:1a40 PID:0101)<br>
‚Ä¢ ESP8266 con firmware SIEV<br>
‚Ä¢ C√°mara USB compatible<br>
‚Ä¢ Puerto serie funcional<br><br>

<b>Resoluci√≥n de Problemas:</b><br>
‚Ä¢ Verifique conexiones USB<br>
‚Ä¢ Reinstale drivers CH340/CP210x<br>
‚Ä¢ Use 'Buscar SIEV' para re-detectar<br>
‚Ä¢ Verifique puerto serie no est√© en uso<br><br>

<b>Comandos de Prueba ESP8266:</b><br>
‚Ä¢ PING ‚Üí SIEV_ESP_OK_v1.0.0<br>
‚Ä¢ STATUS ‚Üí Informaci√≥n del sistema<br>
‚Ä¢ VERSION ‚Üí Detalles del firmware<br>
"""
        
        DialogUtils.show_info("Diagn√≥sticos de Hardware", diagnostic_text, self.main_window)
    
    # ===== GESTI√ìN DE PROTOCOLOS =====
    
    def reset_to_defaults(self):
        """Resetear protocolos a valores por defecto"""
        if not ask_confirmation(
            "Resetear Protocolos",
            "¬øEst√° seguro de que desea eliminar TODOS los protocolos "
            "personalizados y resetear a los valores por defecto?\n\n"
            "Esta acci√≥n no se puede deshacer.",
            self.main_window
        ):
            return
        
        if self.protocol_manager:
            # Limpiar presets
            if hasattr(self.protocol_manager, 'protocols_data'):
                self.protocol_manager.protocols_data["presets"] = {}
                
                # Guardar cambios
                if self.protocol_manager.save_protocols():
                    self.status_message_changed.emit("üîÑ Protocolos restablecidos a valores por defecto")
                    self.protocols_refreshed.emit()  # Se√±al para recargar UI
                    
                    show_success("Reset Completado", 
                               "Protocolos restablecidos a valores por defecto",
                               self.main_window)
                else:
                    show_error("Error", "No se pudo resetear los protocolos", self.main_window)
    
    def refresh_protocols(self):
        """Recargar protocolos desde archivo"""
        if not self.protocol_manager:
            show_error("Error", "Sistema de protocolos no disponible", self.main_window)
            return
        
        success = self.protocol_manager.load_protocols()
        
        if success:
            self.status_message_changed.emit("üîÑ Protocolos recargados desde archivo")
            self.protocols_refreshed.emit()  # Se√±al para recargar UI
            show_info("Protocolos Recargados", 
                     "Los protocolos se han recargado correctamente desde el archivo.",
                     self.main_window)
        else:
            show_error("Error de Recarga", 
                      "No se pudieron recargar los protocolos desde el archivo",
                      self.main_window)
    
    def backup_protocols(self):
        """Crear respaldo de protocolos"""
        if not self.protocol_manager:
            show_error("Error", "Sistema de protocolos no disponible", self.main_window)
            return
        
        from datetime import datetime
        
        # Generar nombre con timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        default_name = f"protocolos_backup_{timestamp}.json"
        
        backup_path, _ = QFileDialog.getSaveFileName(
            self.main_window,
            "Crear Respaldo de Protocolos",
            default_name,
            "JSON Files (*.json)"
        )
        
        if not backup_path:
            return
        
        success = self.protocol_manager.export_protocols(backup_path)
        
        if success:
            message = "Respaldo creado correctamente"
            self.status_message_changed.emit(f"üíæ {message}")
            show_success("Respaldo Creado", 
                       f"Respaldo guardado en:\n{backup_path}",
                       self.main_window)
        else:
            show_error("Error de Respaldo", 
                      "No se pudo crear el respaldo",
                      self.main_window)
    
    # ===== M√âTODOS DE INFORMACI√ìN =====
    
    def get_system_summary(self) -> Dict[str, Any]:
        """Obtener resumen del estado del sistema"""
        protocol_stats = self.protocol_manager.get_statistics() if self.protocol_manager else {}
        
        return {
            'system_status': self.system_status.copy(),
            'protocol_stats': protocol_stats,
            'modules_loaded': [
                'MainWindowBase',
                'SievManager', 
                'ProtocolCoordinator',
                'CameraController',
                'GraphController',
                'MenuActions'
            ]
        }
    
    def cleanup(self):
        """Limpieza al cerrar"""
        print("üßπ Limpiando MenuActions...")
        
        # Guardar protocolos si hay cambios pendientes
        if self.protocol_manager:
            self.protocol_manager.save_protocols()
        
        print("‚úÖ MenuActions limpiado")