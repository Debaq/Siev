#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Camera Controller - Controlador especializado para funciones de c√°mara
Maneja conexi√≥n, grabaci√≥n y configuraci√≥n del widget de c√°mara
"""

from typing import Optional, Dict, Any
from PySide6.QtCore import QObject, Signal
from PySide6.QtWidgets import QPushButton, QLabel, QCheckBox

from camera.camera_widget import ModularCameraWidget


class CameraController(QObject):
    """
    Controlador especializado para el manejo de c√°mara.
    Centraliza toda la l√≥gica de conexi√≥n, grabaci√≥n y configuraci√≥n.
    """
    
    # Se√±ales
    camera_connected = Signal(bool)  # Estado de conexi√≥n
    recording_state_changed = Signal(bool)  # Estado de grabaci√≥n
    camera_status_changed = Signal(str)  # Mensaje de estado
    
    def __init__(self, camera_widget: ModularCameraWidget, parent=None):
        super().__init__(parent)
        
        # Widget de c√°mara
        self.camera_widget = camera_widget
        
        # Referencias UI (se configuran externamente)
        self.connect_button = None
        self.record_button = None
        self.status_label = None
        
        # Checkboxes de opciones
        self.crosshair_check = None
        self.tracking_check = None
        
        # Estado del controlador
        self.siev_camera_index = None
        self.is_recording = False
        
        print("‚úÖ CameraController inicializado")
    
    def set_ui_references(self, connect_button: QPushButton, 
                         record_button: QPushButton = None,
                         status_label: QLabel = None,
                         crosshair_check: QCheckBox = None,
                         tracking_check: QCheckBox = None):
        """Configurar referencias a elementos UI"""
        self.connect_button = connect_button
        self.record_button = record_button
        self.status_label = status_label
        self.crosshair_check = crosshair_check
        self.tracking_check = tracking_check
        
        # Configurar conexiones de UI
        if self.connect_button:
            self.connect_button.clicked.connect(self.toggle_camera)
        
        if self.record_button:
            self.record_button.clicked.connect(self.toggle_recording)
            self.record_button.setEnabled(False)  # Inicialmente deshabilitado
        
        # Opciones de visualizaci√≥n
        if self.crosshair_check:
            self.crosshair_check.toggled.connect(self.update_camera_options)
        
        if self.tracking_check:
            self.tracking_check.toggled.connect(self.update_camera_options)
        
        # Estado inicial
        self.update_ui_state()
        
        print("‚úÖ Referencias UI configuradas en CameraController")
    
    def set_siev_camera_index(self, camera_index: Optional[int]):
        """Configurar √≠ndice de c√°mara SIEV"""
        self.siev_camera_index = camera_index
        print(f"üìπ √çndice de c√°mara SIEV configurado: {camera_index}")
    
    def toggle_camera(self):
        """Toggle conexi√≥n de c√°mara"""
        if not self.camera_widget:
            print("‚ùå Widget de c√°mara no disponible")
            return
        
        if not self.camera_widget.is_connected:
            self._connect_camera()
        else:
            self._disconnect_camera()
    
    def _connect_camera(self):
        """Conectar c√°mara usando √≠ndice SIEV"""
        if self.siev_camera_index is None:
            self._handle_connection_error("No hay √≠ndice de c√°mara SIEV disponible")
            return
        
        print(f"üîå Conectando c√°mara en √≠ndice {self.siev_camera_index}")
        
        # Intentar inicializar c√°mara
        if self.camera_widget.init_camera(self.siev_camera_index):
            # Iniciar captura
            if self.camera_widget.start_capture():
                self._handle_connection_success()
            else:
                self._handle_connection_error("No se pudo iniciar captura")
        else:
            self._handle_connection_error(f"No se pudo abrir c√°mara en √≠ndice {self.siev_camera_index}")
    
    def _disconnect_camera(self):
        """Desconectar c√°mara"""
        print("üîå Desconectando c√°mara")
        
        # Detener grabaci√≥n si est√° activa
        if self.is_recording:
            self._stop_recording()
        
        # Liberar c√°mara
        self.camera_widget.release_camera()
        
        # Actualizar UI
        self._update_ui_for_disconnected()
        
        # Emitir se√±ales
        self.camera_connected.emit(False)
        self.camera_status_changed.emit("C√°mara desconectada")
    
    def _handle_connection_success(self):
        """Manejar conexi√≥n exitosa"""
        print("‚úÖ C√°mara conectada exitosamente")
        
        # Actualizar UI
        self._update_ui_for_connected()
        
        # Emitir se√±ales
        self.camera_connected.emit(True)
        self.camera_status_changed.emit("‚úÖ C√°mara conectada")
    
    def _handle_connection_error(self, error_msg: str):
        """Manejar error de conexi√≥n"""
        print(f"‚ùå Error de conexi√≥n: {error_msg}")
        
        # Actualizar UI
        self._update_ui_for_error()
        
        # Emitir se√±ales
        self.camera_connected.emit(False)
        self.camera_status_changed.emit(f"‚ùå Error: {error_msg}")
    
    def toggle_recording(self):
        """Toggle grabaci√≥n"""
        if not self.camera_widget or not self.camera_widget.is_connected:
            print("‚ö†Ô∏è C√°mara no conectada, no se puede grabar")
            return
        
        if not self.is_recording:
            self._start_recording()
        else:
            self._stop_recording()
    
    def _start_recording(self):
        """Iniciar grabaci√≥n"""
        print("üî¥ Iniciando grabaci√≥n")
        
        self.camera_widget.start_recording()
        self.is_recording = True
        
        # Actualizar UI
        if self.record_button:
            self.record_button.setText("‚èπÔ∏è Detener")
        
        # Emitir se√±ales
        self.recording_state_changed.emit(True)
        self.camera_status_changed.emit("üî¥ GRABANDO - Evaluaci√≥n en curso")
    
    def _stop_recording(self):
        """Detener grabaci√≥n"""
        print("‚èπÔ∏è Deteniendo grabaci√≥n")
        
        self.camera_widget.stop_recording()
        self.is_recording = False
        
        # Actualizar UI
        if self.record_button:
            self.record_button.setText("Grabar")
        
        # Emitir se√±ales
        self.recording_state_changed.emit(False)
        self.camera_status_changed.emit("‚è∏Ô∏è Grabaci√≥n detenida")
    
    def update_camera_options(self):
        """Actualizar opciones de visualizaci√≥n de c√°mara"""
        if not self.camera_widget:
            return
        
        # Recopilar estados de checkboxes
        crosshair_enabled = True
        tracking_enabled = True
        
        if self.crosshair_check:
            crosshair_enabled = self.crosshair_check.isChecked()
        
        if self.tracking_check:
            tracking_enabled = self.tracking_check.isChecked()
        
        # Aplicar opciones al widget
        self.camera_widget.set_overlay_options(
            crosshair=crosshair_enabled,
            tracking=tracking_enabled
        )
        
        print(f"üé® Opciones de c√°mara actualizadas: Cruz={crosshair_enabled}, Tracking={tracking_enabled}")
    
    def set_overlay_options(self, crosshair: bool = None, tracking: bool = None,
                           eye_detection: bool = None, pupil_detection: bool = None):
        """Configurar opciones de overlay program√°ticamente"""
        if not self.camera_widget:
            return
        
        self.camera_widget.set_overlay_options(
            crosshair=crosshair,
            tracking=tracking,
            eye_detection=eye_detection,
            pupil_detection=pupil_detection
        )
        
        print("üé® Opciones de overlay configuradas program√°ticamente")
    
    def set_processing_enabled(self, enabled: bool):
        """Habilitar/deshabilitar procesamiento de detecci√≥n"""
        if self.camera_widget:
            self.camera_widget.set_processing_enabled(enabled)
            print(f"üîÑ Procesamiento de c√°mara {'habilitado' if enabled else 'deshabilitado'}")
    
    def _update_ui_for_connected(self):
        """Actualizar UI para estado conectado"""
        if self.connect_button:
            self.connect_button.setText("üîå Desconectar C√°mara")
        
        if self.record_button:
            self.record_button.setEnabled(True)
        
        if self.status_label:
            self.status_label.setText("Estado: Conectado ‚úÖ")
            self.status_label.setStyleSheet("color: green; font-weight: bold;")
    
    def _update_ui_for_disconnected(self):
        """Actualizar UI para estado desconectado"""
        if self.connect_button:
            self.connect_button.setText("Conectar C√°mara")
        
        if self.record_button:
            self.record_button.setEnabled(False)
            self.record_button.setText("Grabar")
        
        if self.status_label:
            self.status_label.setText("Estado: Desconectado")
            self.status_label.setStyleSheet("color: gray;")
        
        # Reset estado de grabaci√≥n
        self.is_recording = False
    
    def _update_ui_for_error(self):
        """Actualizar UI para estado de error"""
        if self.connect_button:
            self.connect_button.setText("Conectar C√°mara")
        
        if self.record_button:
            self.record_button.setEnabled(False)
            self.record_button.setText("Grabar")
        
        if self.status_label:
            self.status_label.setText("Estado: Error ‚ùå")
            self.status_label.setStyleSheet("color: red; font-weight: bold;")
        
        # Reset estado de grabaci√≥n
        self.is_recording = False
    
    def update_ui_state(self):
        """Actualizar estado completo de la UI"""
        if not self.camera_widget:
            self._update_ui_for_disconnected()
            return
        
        if self.camera_widget.is_connected:
            self._update_ui_for_connected()
            
            # Actualizar estado de grabaci√≥n
            if self.is_recording:
                if self.record_button:
                    self.record_button.setText("‚èπÔ∏è Detener")
        else:
            self._update_ui_for_disconnected()
    
    # ===== M√âTODOS DE INFORMACI√ìN =====
    
    def is_camera_connected(self) -> bool:
        """Verificar si la c√°mara est√° conectada"""
        return self.camera_widget.is_connected if self.camera_widget else False
    
    def is_camera_recording(self) -> bool:
        """Verificar si est√° grabando"""
        return self.is_recording
    
    def get_camera_status(self) -> Dict[str, Any]:
        """Obtener estado completo de la c√°mara"""
        if not self.camera_widget:
            return {
                'connected': False,
                'recording': False,
                'camera_index': None,
                'error': 'Widget no disponible'
            }
        
        camera_info = self.camera_widget.get_camera_status()
        
        return {
            'connected': self.camera_widget.is_connected,
            'recording': self.is_recording,
            'camera_index': self.siev_camera_index,
            'widget_info': camera_info
        }
    
    def get_camera_widget(self) -> Optional[ModularCameraWidget]:
        """Obtener referencia al widget de c√°mara"""
        return self.camera_widget
    
    def force_disconnect(self):
        """Forzar desconexi√≥n de c√°mara"""
        print("üîå Forzando desconexi√≥n de c√°mara")
        
        if self.camera_widget:
            # Detener todo sin emitir se√±ales adicionales
            self.camera_widget.stop_capture()
            self.camera_widget.release_camera()
        
        # Reset estado interno
        self.is_recording = False
        
        # Actualizar UI
        self._update_ui_for_disconnected()
        
        # Emitir se√±al final
        self.camera_connected.emit(False)
    
    def cleanup(self):
        """Limpieza al cerrar"""
        print("üßπ Limpiando CameraController...")
        
        # Detener grabaci√≥n
        if self.is_recording:
            self._stop_recording()
        
        # Desconectar c√°mara
        if self.camera_widget and self.camera_widget.is_connected:
            self.camera_widget.release_camera()
        
        print("‚úÖ CameraController limpiado")